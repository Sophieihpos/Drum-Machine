{"version":3,"sources":["components/click1.wav","components/click2.wav","components/DrumPad.js","components/PadsContainer.js","components/Metronome.js","components/Controls.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DrumPad","props","state","playSound","bind","handleKeyPress","document","addEventListener","this","removeEventListener","event","keyCode","audio","play","updateDisplay","name","replace","className","onClick","id","keyTrigger","src","url","ref","audioTag","React","Component","padsArr","PadsContainer","pads","map","i","Metronome","startStop","playing","clearInterval","timer","setState","setInterval","playClick","bpm","count","beatsPerMeasure","click2","click1","Audio","handleBpmChange","target","value","type","min","max","onChange","Controls","display","App","displayClipName","href","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99d04308.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React from 'react';\r\n\r\nclass DrumPad extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n\r\n    };\r\n    this.playSound = this.playSound.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this.handleKeyPress)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this.handleKeyPress)\r\n  }\r\n\r\n  handleKeyPress(event){\r\n    if (event.keyCode === this.props.keyCode){\r\n      this.playSound();\r\n    }\r\n  }\r\n\r\n  playSound(){\r\n    this.audio.play();\r\n    this.props.updateDisplay(this.props.name.replace(/-/g, ' '));\r\n  }\r\n\r\n    render(props){\r\n      return(\r\n        <div className=\"drum-pad\" onClick={this.playSound} id={this.props.name}>\r\n          {this.props.keyTrigger}\r\n          <audio className=\"clip\" id={this.props.keyTrigger} src={this.props.url} ref={(audioTag) => { this.audio = audioTag }}/>\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React from 'react';\r\nimport DrumPad from './DrumPad'\r\n\r\nconst padsArr = [\r\n  {\r\n    keyCode: 81,\r\n    keyTrigger: 'Q',\r\n    id: 'Heater-1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n  }, {\r\n    keyCode: 87,\r\n    keyTrigger: 'W',\r\n    id: 'Heater-2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n  }, {\r\n    keyCode: 69,\r\n    keyTrigger: 'E',\r\n    id: 'Heater-3',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n  }, {\r\n    keyCode: 65,\r\n    keyTrigger: 'A',\r\n    id: 'Heater-4',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n  }, {\r\n    keyCode: 83,\r\n    keyTrigger: 'S',\r\n    id: 'Clap',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n  }, {\r\n    keyCode: 68,\r\n    keyTrigger: 'D',\r\n    id: 'Open-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n  }, {\r\n    keyCode: 90,\r\n    keyTrigger: 'Z',\r\n    id: \"Kick-n'-Hat\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n  }, {\r\n    keyCode: 88,\r\n    keyTrigger: 'X',\r\n    id: 'Kick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n  }, {\r\n    keyCode: 67,\r\n    keyTrigger: 'C',\r\n    id: 'Closed-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n  }\r\n]\r\n\r\nclass PadsContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render(){\r\n    let pads = padsArr.map(i => {\r\n      return(\r\n        <DrumPad\r\n          keyCode={i.keyCode}\r\n          keyTrigger={i.keyTrigger}\r\n          name={i.id}\r\n          url={i.url}\r\n          updateDisplay={this.props.updateDisplay}\r\n        />\r\n      )\r\n    });\r\n    return (\r\n      <div id=\"pads-container\">\r\n        {pads}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default PadsContainer;\r\n","import React from 'react'\r\nimport click1 from './click1.wav';\r\nimport click2 from './click2.wav';\r\n\r\nclass Metronome extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      playing: false,\r\n      count: 0,\r\n      bpm: 100,\r\n      beatsPerMeasure: 4\r\n    };\r\n    this.click1 = new Audio(click1);\r\n    this.click2 = new Audio(click2);\r\n    this.handleBpmChange = this.handleBpmChange.bind(this);\r\n  }\r\n\r\n  handleBpmChange(event){\r\n    const bpm = event.target.value\r\n\r\n    if (this.state.playing) {\r\n      clearInterval(this.timer);\r\n      this.timer = setInterval(this.playClick, (60 / bpm) * 1000);\r\n\r\n      this.setState({\r\n        count: 0,\r\n        bpm\r\n      });\r\n    } else {\r\n      this.setState({ bpm })\r\n    }\r\n  }\r\n  startStop = () => {\r\n    if (this.state.playing) {\r\n      clearInterval(this.timer);\r\n      this.setState({\r\n        playing: false\r\n      });\r\n    } else {\r\n      this.timer = setInterval(\r\n        this.playClick,\r\n        (60 / this.state.bpm) * 1000\r\n      );\r\n      this.setState(\r\n        {\r\n          count: 0,\r\n          playing: true\r\n        },\r\n        this.playClick\r\n      )\r\n    }\r\n  }\r\n\r\n  playClick = () => {\r\n    const { count, beatsPerMeasure } = this.state;\r\n    if (count % beatsPerMeasure === 0) {\r\n      this.click2.play();\r\n    } else {\r\n      this.click1.play();\r\n    }\r\n    this.setState(state => ({\r\n      count: (state.count + 1) % state.beatsPerMeasure\r\n    }))\r\n  }\r\n\r\n  render(){\r\n    const { playing, bpm } = this.state;\r\n\r\n    return(\r\n      <div className=\"metronome\">\r\n        Metronome\r\n        <div className=\"bpm-slider\">\r\n          <div>{bpm} BPM</div>\r\n          <input\r\n            type=\"range\"\r\n            min=\"40\"\r\n            max=\"240\"\r\n            value={bpm}\r\n            onChange={this.handleBpmChange}\r\n          />\r\n        </div>\r\n        <button onClick={this.startStop}>\r\n          {playing ? 'Stop' : 'Start'}\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Metronome\r\n","import React from 'react'\r\nimport Metronome from './Metronome'\r\n\r\nfunction Controls(props){\r\n  return (\r\n    <div id=\"controls\">\r\n      <div id=\"display\">\r\n        {props.display}\r\n      </div>\r\n      <Metronome />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Controls\r\n","import React from 'react';\nimport './App.css';\nimport PadsContainer from './components/PadsContainer'\nimport Controls from './components/Controls'\n\n// #E63946 #F1FAEE #A8DADC #457B9D #1D3557\n// <audio className=\"clip\" id=\"Q\" src=\"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\" ></audio>\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      display: ''\n    };\n    this.displayClipName = this.displayClipName.bind(this);\n  }\n\n  displayClipName(name){\n    this.setState({\n      display: name\n    });\n  }\n\n  render(){\n    return (\n      <div>\n      <div id=\"drum-machine\">\n        <PadsContainer updateDisplay={this.displayClipName}/>\n        <Controls display={this.state.display}/>\n      </div>\n      <footer>Created by <a href=\"https://twitter.com/sophiecantype\" target=\"_blank\">Sophie Chapman</a></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}